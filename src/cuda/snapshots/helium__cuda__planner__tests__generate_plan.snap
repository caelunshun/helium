---
source: src/cuda/planner.rs
expression: plan
---
Plan {
    steps: [
        Step(
            [
                ReductionKernel {
                    kernel: LoadedKernel {
                        params: [
                            Node(
                                NodeId(
                                    1v1,
                                ),
                            ),
                            Node(
                                NodeId(
                                    2v1,
                                ),
                            ),
                            Node(
                                NodeId(
                                    3v1,
                                ),
                            ),
                            Output(
                                NodeId(
                                    7v1,
                                ),
                            ),
                            Output(
                                NodeId(
                                    6v1,
                                ),
                            ),
                            ReductionStride,
                            Size,
                        ],
                        module_name: "module0",
                        func_name: "generatedReductionKernel",
                        output_types: {
                            NodeId(
                                6v1,
                            ): F32,
                            NodeId(
                                7v1,
                            ): Bf16,
                        },
                        reduction_output: Some(
                            NodeId(
                                6v1,
                            ),
                        ),
                    },
                    reduction_depth: 1,
                    initial_reduced_value: -inf,
                    output_shape: Shape(
                        [
                            1,
                            1,
                        ],
                    ),
                },
            ],
        ),
        Step(
            [
                Matmul(
                    MatmulInstr {
                        a_input: NodeId(
                            6v1,
                        ),
                        b_input: NodeId(
                            7v1,
                        ),
                        output_type: F32,
                        transpose_a: false,
                        transpose_b: false,
                        bias_input: None,
                        epilogue: CUBLASLT_EPILOGUE_DEFAULT,
                        output: NodeId(
                            8v1,
                        ),
                    },
                ),
                FreeTensor(
                    NodeId(
                        1v1,
                    ),
                ),
                FreeTensor(
                    NodeId(
                        2v1,
                    ),
                ),
                FreeTensor(
                    NodeId(
                        3v1,
                    ),
                ),
            ],
        ),
        Step(
            [
                FreeTensor(
                    NodeId(
                        6v1,
                    ),
                ),
                FreeTensor(
                    NodeId(
                        7v1,
                    ),
                ),
            ],
        ),
    ],
}
